name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      stage:
        description: Stage
        required: true
        default: lightning
        type: environment
      deploy-manifest-path:
        description: Deployment Manifest JSON/CSV
        required: true
      deploy-config-path:
        description: Configuration Yaml for OCX
      skip-deployment:
        type: boolean
        default: false
        description: Skip deployment, just setup and run test

jobs:
  pre-deployment:
    runs-on: ubuntu-latest
    outputs:
      HELM_ENABLED: ${{ steps.check.outputs.HELM_ENABLED }}
      CEREBRO_ENABLED: ${{ steps.check.outputs.CEREBRO_ENABLED }}
    steps:
      - name: Set HELM and CEREBRO Enabled Outputs
        id: check
        run: |
          echo "::set-output name=HELM_ENABLED::True"
          echo "::set-output name=CEREBRO_ENABLED::True"
      - name: Debug Outputs
        run: |
          echo "HELM_ENABLED: ${{ steps.check.outputs.HELM_ENABLED }}"
          echo "CEREBRO_ENABLED: ${{ steps.check.outputs.CEREBRO_ENABLED }}"

  helm:
    if: ${{ !failure() && !cancelled() && needs.pre-deployment.outputs.HELM_ENABLED == 'True' && !fromJSON(inputs.skip-deployment)}}
    needs: [pre-deployment]
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs: 
      HELM-PARAM1: ${{ steps.helm-bash.outputs.param1 }}
    steps:
      - name: Log Inputs for Helm
        id: helm-bash
        run: |
          echo "skip-deployment: ${{ inputs.skip-deployment }}"
          echo "HELM_ENABLED: ${{ needs.pre-deployment.outputs.HELM_ENABLED }}"
          echo "param1=value1" >> "$GITHUB_OUTPUT"
          echo "param1=value2" >> "$GITHUB_OUTPUT"
      - name: Helm Deployment
        run: echo "Running Helm Deployment..."

  cerebro:
    if: ${{ !failure() && !cancelled() && needs.pre-deployment.outputs.CEREBRO_ENABLED == 'True' && !fromJSON(inputs.skip-deployment)}}
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [pre-deployment]
    steps:
      - name: Log Inputs for Cerebro
        run: |
          echo "skip-deployment: ${{ inputs.skip-deployment }}"
          echo "CEREBRO_ENABLED: ${{ needs.pre-deployment.outputs.CEREBRO_ENABLED }}"
          echo "::group::group0"
          echo "in group0-0"
          echo "::group::group1"
          echo "in group1"
          echo "in group0-1"
          echo "::endgroup::"
          echo "::endgroup::"
      - name: Cerebro Deployment
        run: echo "Running Cerebro Deployment..."
  cleanup:
    runs-on: ubuntu-latest
    needs: [helm, cerebro]
    if: cancelled()
    steps:
      - name: cleanup
        env:
          PARAM1: ${{ needs.helm.outputs.HELM-PARAM1 }}
        run: |
          echo $PARAM1
    
